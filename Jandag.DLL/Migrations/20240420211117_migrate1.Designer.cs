// <auto-generated />
using System;
using Jandag.DLL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Jandag.DLL.Migrations
{
    [DbContext(typeof(GlobalTvDb))]
    [Migration("20240420211117_migrate1")]
    partial class migrate1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DDL.Database_Layer.Entities.Chanell", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name_Of_Chanell");

                    b.HasKey("Id");

                    b.ToTable("Chanells");
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Desclambler", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card_In_Desclambler");

                    b.Property<int>("EmrNumber")
                        .HasColumnType("int")
                        .HasColumnName("Emr_Number");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("Port_In_Desclambler");

                    b.Property<int>("Source_ID")
                        .HasColumnType("int")
                        .HasColumnName("Source_Id");

                    b.HasKey("Id");

                    b.HasIndex("Source_ID")
                        .IsUnique();

                    b.ToTable("Desclamlers");
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Emr60Info", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Reciever_port");

                    b.Property<int>("SourceEmr")
                        .HasColumnType("int")
                        .HasColumnName("Source_emr");

                    b.HasKey("Id");

                    b.ToTable("Emr60infos");
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Transcoder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Card")
                        .HasColumnType("int")
                        .HasColumnName("Card_In_Transcoder");

                    b.Property<int>("EmrNumber")
                        .HasColumnType("int")
                        .HasColumnName("Emr_Number");

                    b.Property<int>("Port")
                        .HasColumnType("int")
                        .HasColumnName("Port_In_Transcoder");

                    b.Property<int>("Source_ID")
                        .HasColumnType("int")
                        .HasColumnName("Source_Id");

                    b.HasKey("Id");

                    b.HasIndex("Source_ID")
                        .IsUnique();

                    b.ToTable("Transcoders");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.DesclamlerCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CardCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Card_Code");

                    b.Property<string>("CardManufacturer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Card_Manufacturer");

                    b.Property<int>("DesclamblerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DesclamblerId");

                    b.ToTable("DesclamlerCards");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.SatteliteFrequency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Frequency")
                        .HasColumnType("int");

                    b.Property<string>("Polarisation")
                        .HasColumnType("nvarchar(1)");

                    b.Property<int>("PortIn250")
                        .HasColumnType("int");

                    b.Property<int>("SymbolRate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SatteliteFrequencies");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.Source", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChanellFormat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChanellFormat");

                    b.Property<int>("ChanellId")
                        .HasColumnType("int");

                    b.Property<int>("EmrNumber")
                        .HasColumnType("int");

                    b.Property<int?>("SatteliteId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("IsActive");

                    b.Property<string>("card")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("port")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChanellId");

                    b.HasIndex("SatteliteId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Birthdate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("PersonalNumber");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Surname");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonalNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Desclambler", b =>
                {
                    b.HasOne("Jandag.DLL.Entities.Source", "Source")
                        .WithOne("Desclambler")
                        .HasForeignKey("DDL.Database_Layer.Entities.Desclambler", "Source_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Transcoder", b =>
                {
                    b.HasOne("Jandag.DLL.Entities.Source", "Source")
                        .WithOne("Transcoder")
                        .HasForeignKey("DDL.Database_Layer.Entities.Transcoder", "Source_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.DesclamlerCard", b =>
                {
                    b.HasOne("DDL.Database_Layer.Entities.Desclambler", "desclambler")
                        .WithMany("DescCard")
                        .HasForeignKey("DesclamblerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("desclambler");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.Source", b =>
                {
                    b.HasOne("DDL.Database_Layer.Entities.Chanell", "chanell")
                        .WithMany("Sources")
                        .HasForeignKey("ChanellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jandag.DLL.Entities.SatteliteFrequency", "sattelite")
                        .WithMany("Sources")
                        .HasForeignKey("SatteliteId");

                    b.Navigation("chanell");

                    b.Navigation("sattelite");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Jandag.DLL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Jandag.DLL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Jandag.DLL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Jandag.DLL.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Chanell", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("DDL.Database_Layer.Entities.Desclambler", b =>
                {
                    b.Navigation("DescCard");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.SatteliteFrequency", b =>
                {
                    b.Navigation("Sources");
                });

            modelBuilder.Entity("Jandag.DLL.Entities.Source", b =>
                {
                    b.Navigation("Desclambler")
                        .IsRequired();

                    b.Navigation("Transcoder")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
